import { Composer, Markup, Scenes } from "telegraf";
import { message } from "telegraf/filters";
import { CustomContext, Homework, RawFileType } from "../../types/interfaces";
import { logger } from "../utils/logger";


export interface IHomeworkSceneController {
  getHomeworks: (ctx: CustomContext) => Promise<Homework[]>;
  sendSolution: (solution: solutionPayloadType) => Promise<boolean>;
}

export type solutionPayloadType = {
  token: string;
  files: RawFileType[];
  text: string;
  homeworkID: number;
  studentID: number;
  chatID: number;
};

export class HomeworkScene {
  controller: IHomeworkSceneController;
  scenes = {
    homeworks: {
      name: 'homeworks',
      description: '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –∏ —Å–¥–∞—á–∏ —Ä–µ—à–µ–Ω–∏–π'
    }
  };

  constructor(controller: IHomeworkSceneController) {
    this.controller = controller;
  };

  initStage() {
    const chooseHomeworkStep = this.chooseHomeworkStep();
    const actionOnHomeworkStep = this.actionOnHomeworkStep();
    const sendSolutionStep = this.sendSolutionStep();

    const hwScene = new Scenes.WizardScene<CustomContext>(
      this.scenes.homeworks.name,
      this.startHomeworkStep.bind(this),
      chooseHomeworkStep,
      actionOnHomeworkStep,
      sendSolutionStep,
      this.replyExit.bind(this)
    );
    return new Scenes.Stage<CustomContext>([hwScene]);
  };

  private async startHomeworkStep(ctx: CustomContext) {
    ctx.wizard.state.homeworks = [];
    ctx.wizard.state.targetHomeworkID = -1;

    ctx.wizard.state.homeworks = await this.controller.getHomeworks(ctx);
    if (ctx.wizard.state.homeworks.length === 0) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π');
      return await ctx.scene.leave();
    }
    await ctx.reply(
      '–í–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è',
      Markup.inlineKeyboard(ctx.wizard.state.homeworks.map(
        (hw) => {
          return Markup.button.callback(hw.title, 'homeworks/' + hw.homeworkid);
        }
      ), {
        columns: 1
      })
    );
    return ctx.wizard.next();
  }

  private chooseHomeworkStep(): Composer<CustomContext> {
    const handler = new Composer<CustomContext>();
    handler.action(
      /^homeworks\/(\d+)$/,
      async ctx => {
        const hw = ctx.wizard.state.homeworks.find(
          hw => hw.homeworkid === Number(ctx.match[1])
        );
        if (hw === undefined) {
          await ctx.editMessageText(
            '–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            Markup.inlineKeyboard([])
          );
          return this.replyExit(ctx);
        }
        ctx.wizard.state.targetHomeworkID = Number(ctx.match[1]);
        await ctx.editMessageText(
          `–î–ó: ${hw.title}\n` +
          `${hw.description}`,
          Markup.inlineKeyboard([
            Markup.button.callback('–°–¥–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ ‚òëÔ∏è', 'solution'),
            Markup.button.callback('–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é üìñ', 'show'),
            Markup.button.callback('–í—ã–π—Ç–∏ üèÉ', 'exit'),
          ], {
            columns: 1
          })
        );
        return ctx.wizard.next();
      }
    );
    handler.on(
      "message",
      async ctx => {
        return this.replyExit(ctx);
      }
    );

    return handler;
  }

  private actionOnHomeworkStep(): Composer<CustomContext> {
    const handler = new Composer<CustomContext>();
    handler.action(
      'solution',
      async ctx => {
        ctx.wizard.state.curretSolution ??= {
          text: '',
          rawAttachList: []
        };
        await ctx.editMessageText(
          '–í—Å—ë, —á—Ç–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å, –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–≤–æ—ë —Ä–µ—à–µ–Ω–∏–µ\\. –ö–∞–∫ –∑–∞–∫–æ–Ω—á–µ—à—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *–û—Ç–ø—Ä–∞–≤–∏—Ç—å üì¶*\\.\n' +
          '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–∂–¥–∏—à—å —Å–æ–æ–±–∂–µ–Ω–∏—è `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ`, —á—Ç–æ–±—ã –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º, —á—Ç–æ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ —Ä–µ—à–µ–Ω–∏–µ\\.\n' +
          '–ó–∞–ø–∏—Å—ã–≤–∞—é \\.\\.\\.',
          {
            parse_mode: "MarkdownV2",
            ...Markup.inlineKeyboard([
              Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å üì¶', 'send'),
              Markup.button.callback('–í—ã–π—Ç–∏ üèÉ', 'exit'),
            ]),
          },
        );
        return ctx.wizard.next();
      }
    );
    handler.action(
      'show',
      async ctx => {
        const hw = ctx.wizard.state.homeworks.find(
          hw => hw.homeworkid === ctx.wizard.state.targetHomeworkID
        );
        if (hw === undefined) {
          await ctx.editMessageText(
            '–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            Markup.inlineKeyboard([])
          );
          return this.replyExit(ctx);
        }

        await ctx.editMessageText(
          '–ü–æ–ª–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –î–ó ' + hw.title + '\n' +
          hw.description,
          Markup.inlineKeyboard([])
        );

        for (let idx = 0; idx < hw.tasks.length; idx++) {
          const task = hw.tasks[idx];
          if (task.attachmenturlsList.length === 0) {
            await ctx.reply('–ó–∞–¥–∞—á–∞ ‚Ññ' + (idx + 1) + '\n' + task.description);
            continue;
          }
          await ctx.replyWithMediaGroup(
            task.attachmenturlsList.map(
              (attach, id) => {
                return {
                  media: attach,
                  type: 'document',
                  caption: id === task.attachmenturlsList.length - 1 ?
                    '–ó–∞–¥–∞—á–∞ ‚Ññ' + (idx + 1) + '\n' + task.description :
                    undefined,
                };
              }
            )
          );
        }
        return this.replyExit(ctx);
      }
    );
    handler.action(
      'exit',
      async ctx => {
        const evilSay = await fetch('https://evilinsult.com/generate_insult.php')
          .then(res => {
            return res.text();
          })
          .catch(() => '');
        await ctx.answerCbQuery(evilSay);
        return this.replyExit(ctx);
      }
    );
    handler.on(
      "message",
      async ctx => {
        return this.replyExit(ctx);
      }
    );
    return handler;
  }

  private sendSolutionStep(): Composer<CustomContext> {
    const handler = new Composer<CustomContext>();
    handler.on(
      message("document"),
      async ctx => {
        if (ctx.message.caption) {
          ctx.wizard.state.curretSolution.text += ctx.message.caption + '\n';
        }
        ctx.wizard.state.curretSolution.rawAttachList.push(
          {
            fileID: ctx.message.document.file_id,
            fileName: ctx.message.document.file_name,
            mimeType: ctx.message.document.mime_type,
          }
        );
        await ctx.reply('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
      }
    );
    handler.on(
      message("photo"),
      async ctx => {
        const fileID = ctx.message.photo.pop()?.file_id;
        if (fileID === undefined) {
          logger.error('sendSolutionStep: fileID === undefined');
          return this.replyExitWithError(ctx);
        }

        if (ctx.message.caption) {
          ctx.wizard.state.curretSolution.text += ctx.message.caption + '\n';
        }
        ctx.wizard.state.curretSolution.rawAttachList.push(
          {
            fileID: fileID,
          }
        );
        await ctx.reply('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
      }
    );
    handler.on(
      message('text'),
      async ctx => {
        ctx.wizard.state.curretSolution.text += ctx.message.text + '\n';
        await ctx.reply('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
      }
    );
    handler.action(
      'send',
      async ctx => {
        if (ctx.wizard.state.curretSolution.text.endsWith('\n')) {
          ctx.wizard.state.curretSolution.text = ctx.wizard.state.curretSolution.text.slice(0, -1);
        }
        const res = await this.controller.sendSolution({
          token: ctx.telegram.token,
          files: ctx.wizard.state.curretSolution.rawAttachList,
          text: ctx.wizard.state.curretSolution.text,
          studentID: ctx.educrm.studentID,
          homeworkID: ctx.wizard.state.targetHomeworkID,
          chatID: ctx.educrm.chatID
        });
        if (!res) {
          return this.replyExitWithError(ctx);
        }
        await ctx.reply('–†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        return this.replyExit(ctx);
      }
    );
    handler.action(
      'exit',
      async ctx => {
        await ctx.editMessageText(
          '–≠—Ö—Ö—Ö, —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üò¢',
          Markup.inlineKeyboard([])
        );
        const evilSay = await fetch('https://evilinsult.com/generate_insult.php')
          .then(res => {
            return res.text();
          })
          .catch(() => '');
        await ctx.answerCbQuery(evilSay);
        return this.replyExit(ctx);
      }
    );
    handler.on(
      "message",
      async ctx => {
        await ctx.replyWithMarkdownV2(
          '–í –∫–∞—á–µ—Ç—Å–≤–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å *—Ñ–∞–π–ª*, *—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é* –∏ *—Ç–µ–∫—Å—Ç*\n' +
          '–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *–í—ã—Ö–æ–¥*'
        );
      }
    );
    return handler;
  }

  private async replyExitWithError(ctx: CustomContext) {
    await ctx.reply('–£–ø—Å, —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (‚ï•Ôπè‚ï•)');
    return this.replyExit(ctx);
  }

  private async replyExit(ctx: CustomContext) {
    await ctx.reply('–í–æ–∑–≤—Ä–∞—Ç –∫ –æ–±–º–µ–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.');
    return await ctx.scene.leave();
  }

}
