//grpc_tools_node_protoc --js_out=import_style=commonjs,binary:. --grpc_out=grpc_js:. proto/model.proto
syntax = "proto3";

package chat;
option go_package = "./chat";

message Message {
    int32 chatID = 1;
    string text = 2;
    repeated string attachmentURLs = 3;
}

message FileUploadRequest {
    string mimetype = 1;
    string fileURL = 2;
}

message FileUploadResponse {
    string internalFileURL = 1;
}

message HomeworkData {
    int32 homeworkID = 1;
    string title = 2;
    string description = 3;
    repeated string attachmentURLs = 4;
}

message GetHomeworksRequest {
    int32 classID = 1;
}

message GetHomeworksResponse {
    repeated HomeworkData homeworks = 1;
}

message SolutionData {
    string text = 1;
    repeated string attachmentURLs = 2;
}

message SendSolutionRequest {
    int32 homeworkID = 1;
    SolutionData solution = 2;
    int32 studentID = 3;
}

message SendSolutionResponse { }

message ValidateTokenRequest {
    string token = 1;
}

message ValidateTokenResponse {
    int32 classID = 1;
}


message CreateStudentRequest {
    string name = 1;
    string type = 2; // TG VK
    string avatarURL = 3;
}

message CreateStudentResponse {
    int32 studentID = 1;
}

message CreateChatRequest {
    int32 studentID = 1;
    int32 classID = 2;
}

message CreateChatResponse {
    int32 internalChatID = 1;
}

service BotChat {
    rpc StartChatTG(stream Message) returns (stream Message);

    rpc UploadFile(FileUploadRequest) returns (FileUploadResponse);
    rpc ValidateToken (ValidateTokenRequest) returns (ValidateTokenResponse);
    rpc CreateChat (CreateChatRequest) returns (CreateChatResponse);
    rpc GetHomeworks (GetHomeworksRequest) returns (GetHomeworksResponse);
    rpc CreateStudent(CreateStudentRequest) returns (CreateStudentResponse);
    rpc SendSolution (SendSolutionRequest) returns (SendSolutionResponse);
}
